name: build and package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the new version number (e.g., 1.0.0.1)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.x' # The .NET SDK version to use

jobs:
  build-and-test:

    name: build-and-package
    runs-on: windows-latest

    env:
      Solution_Name: RailGo.sln
      SigningKey_Path: SigningKey.pfx

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.DOTNET_VERSION}}

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Release

    - name: Update AppxManifest Version
      shell: pwsh
      run: |
        $AppxManifestPath = "RailGo/Package.appxmanifest"
        $AndroidManifestPath = "RailGo.Android/Platforms/Android/AndroidManifest.xml
        $UnoManifestPath = "RailGo/Package.appxmanifest"
        $newVersion = "${{ github.event.inputs.version }}"
        $versionParts = $newVersion -split "\."
        $versionCode = ($versionParts[0] * 10000) + ($versionParts[1] * 100) + ($versionParts[2])
        Write-Output "Setting new version: $newVersion"
        Write-Output "Setting new version code: $versionCode"
        [xml]$xmlMSIX = Get-Content $AppxManifestPath
        $identityNode = $xmlMSIX.Package.Identity
        $identityNode.Version = $newVersion
        $xmlMSIX.Save($AppxManifestPath)
        [xml]$xmlAndroid = Get-Content $AndroidManifestPath
        $xmlAndroid.manifest.@'android:versionCode' = $versionCode
        $xmlAndroid.manifest.@'android:versionName' = $newVersion
        $xmlAndroid.Save($AndroidManifestPath)
        [xml]$xmlUno = Get-Content $UnoManifestPath
        $xmlUno.Project.PropertyGroup.ApplicationDisplayVersion = $newVersion
        $xmlUno.Project.PropertyGroup.ApplicationVersion = $versionCode
        $xmlUno.Save($UnoManifestPath)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=false
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64|ARM64
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: AppxPackages\
        Configuration: Release

    # Decode the base64 encoded pfx and sign the package
    - name: Sign .msix
      if: ${{ inputs.create_package }}
      run: |
        # Get signtool.exe
        $signtool = Get-Item -Path "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe"
        if ($signtool -is [array]) {
          $signtool = $signtool[0]
        }

        # Sign .msix
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.pfx_base64_encoded }}")
        [IO.File]::WriteAllBytes("${{ env.SigningKey_Path }}", $pfx_cert_byte)
        & $signtool sign /f "${{ env.SigningKey_Path }}" /fd SHA256 /td SHA256 "${{ steps.preparation.outputs.packageName }}.msix"
        rm "${{ env.SigningKey_Path }}"
        
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: |
          RailGo/AppxPackages/*/*.msix
          RailGo.Android/bin/Release/*/*.apk
